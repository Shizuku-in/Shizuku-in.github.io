<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于 Fluid 主题做的一点美化</title>
    <link href="/2024/12/01/002/"/>
    <url>/2024/12/01/002/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为觉得 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 看起来总感觉少了点什么东西，于是这个周末就花了点时间做了些许美化，提前感谢提供美化方案的大佬们！</p><h1 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在 Hexo 根目录下的<code>source</code>文件夹中创建<code>css</code>和<code>js</code>两个文件夹，之后会用上。</p><h2 id="图片模糊淡出效果"><a href="#图片模糊淡出效果" class="headerlink" title="图片模糊淡出效果"></a>图片模糊淡出效果</h2><p>在<code>js</code>文件夹中创建<code>blurpicload.js</code>，内容如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> observerOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token literal-property property">rootMargin</span><span class="token operator">:</span> <span class="token string">'0px'</span><span class="token punctuation">,</span>        <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> img <span class="token operator">=</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>img<span class="token punctuation">.</span>complete <span class="token operator">&amp;&amp;</span> img<span class="token punctuation">.</span>naturalWidth <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    img<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'loaded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    img<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> img<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'loaded'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> observerOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> images <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.post-content img, .container img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    images<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在<code>css</code>文件夹中创建<code>blurpicload.js</code>，内容如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.post-content img, .container img</span> <span class="token punctuation">&#123;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> filter 1s ease<span class="token punctuation">,</span>opacity 1s ease<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.post-content img.loaded, .container img.loaded</span> <span class="token punctuation">&#123;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#comments img</span> <span class="token punctuation">&#123;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>另外推荐把默认的懒加载动画换成一张透明的 SVG 图片，而不用默认的<code>loading.gif</code></p><h1 id="待补完"><a href="#待补完" class="headerlink" title="待补完"></a>待补完</h1>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>就算是萝莉控也能看懂的 Hexo 部署教程</title>
    <link href="/2024/11/07/001/"/>
    <url>/2024/11/07/001/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://hexo.io/">Hexo</a> 是一个快速、简洁且高效的博客框架，在几秒内，即可利用靓丽的主题生成静态网页。本篇文章旨在让身为萝莉控的你也能一帆风顺地安装并部署好一个 Hexo 博客。话不多说，让我们直接步入主题。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="需要安装的软件"><a href="#需要安装的软件" class="headerlink" title="需要安装的软件"></a>需要安装的软件</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>你可以在<a href="https://git-scm.com/downloads">此处</a>下载 git 的安装包，按照提示安装即可。</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>你可以在<a href="https://nodejs.org/zh-cn/download/prebuilt-installers">此处</a>下载 Node.js 的安装包，一样按照提示安装即可。</p><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>打开 CMD 或是 PowerShell。</p><p>输入：</p><figure><div class="code-wrapper"><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">git</span> <span class="token parameter attr-name">-v</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里应该会显示<code>git version &lt;你的git版本&gt;</code>。</p><p>输入：</p><figure><div class="code-wrapper"><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">node</span> <span class="token parameter attr-name">-v</span></span><span class="token command"><span class="token keyword">npm</span> <span class="token parameter attr-name">-v</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这是应该会显示你的 Node.js 和 npm 版本。</p><p>若无问题，则让我们进入下一步。</p><h2 id="安装-Hexo-CLI"><a href="#安装-Hexo-CLI" class="headerlink" title="安装 Hexo-CLI"></a>安装 Hexo-CLI</h2><p>运行命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">npm</span> install <span class="token parameter attr-name">-g</span> hexo-cli</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>同样地，可以使用以下指令检查 Hexo-CLI 是否安装成功：</p><figure><div class="code-wrapper"><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">hexo</span> <span class="token parameter attr-name">-v</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="初始化安装"><a href="#初始化安装" class="headerlink" title="初始化安装"></a>初始化安装</h1><h2 id="部署-Hexo"><a href="#部署-Hexo" class="headerlink" title="部署 Hexo"></a>部署 Hexo</h2><p>运行命令，选择一个你要部署 Hexo 的目录，如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">cd</span> D:\</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>再次运行命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">hexo</span> init &lt;部署文件夹></span><span class="token command"><span class="token keyword">cd</span> &lt;部署文件夹></span><span class="token command"><span class="token keyword">npm</span> install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>若<code>npm install</code>运行不成功，可以尝试删除<code>node_modules</code>文件夹中的所有文件，再次运行该命令。</p><p>初始化后，您的项目文件夹大致将如下所示：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">.├─.github├─scaffolds├─source│  └─posts├─themes...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>至此，你可以测试 Hexo 是否部署成功。</p><p>定位到安装 Hexo 的根文件夹，运行命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">hexo</span> g</span><span class="token command"><span class="token keyword">hexo</span> s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>使用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> ，大概就能看到部署的博客了。</p><p>另外，本地服务器默认是在 4000 端口开放的，若该端口被占用，可以尝试命令<code>hexo s -p &lt;端口&gt;</code>使用其他端口开启本地服务器。</p><h1 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h1><p>打开根目录下的<code>_config.yml</code>，你可以在<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>中找到详细的配置说明。</p><p>我们可以对其进行以下简单的配置：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token comment">#这里填你博客的标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token key atrule">language</span><span class="token punctuation">:</span> <span class="token comment">#可以填zh-CN</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment">#可以填Asia/Shanghai</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>可以在<a href="https://hexo.io/themes/">这里</a>找到众多好看的主题，挑选一个，找到该主题的配置指南，按教程安装即可。</p><h1 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h1><h2 id="创建-GitHub-账号"><a href="#创建-GitHub-账号" class="headerlink" title="创建 GitHub 账号"></a>创建 GitHub 账号</h2><p>在<a href="https://github.com/signup/">这里</a>创建你的 GitHub 账号。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>登录刚刚创建的账号，回到 GitHub <a href="https://github.com/">主页</a>，点击右上角的<code>+</code>号，再点击<code>New repository</code>以创建托管 Hexo 的仓库。</p><p><code>Repository name</code>填写<code>&lt;你的 GitHub 用户名&gt;.github.io</code>。如，若我的 GitHub 用户名为 gkouen 的话，<code>Repository name</code>就应该填写为<code>gkouen.github.io</code>。</p><p>权限设为<code>Public</code>，其余的选项尚可不用配置。</p><h2 id="创建-Personal-access-token"><a href="#创建-Personal-access-token" class="headerlink" title="创建 Personal access token"></a>创建 Personal access token</h2><p>在 GitHub 点击右上角头像，进入<code>Settings</code>→<code>Developer settings</code>→<code>Personal access tokens</code>→<code>Tokens (classic)</code>，或直接点击<a href="https://github.com/settings/tokens">此处</a>。</p><p>接下来，点击右边的<code>Generate new token (classic)</code>以创建 token，<code>Note</code>中随便起一个自己喜欢的名字，<code>Expiration</code>看情况自己设置，在<code>Select scopes</code>中勾选<code>repo</code>和<code>delete_repo</code>，最后点<code>Generate token</code>。</p><p>随后会像图中一样显示出 token，请找个地方把它粘贴下来。<br><img src="/img/001-02.webp" alt="示例"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>定位到部署 Hexo 的根文件夹，运行命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">npm</span> install hexo-deployer-git <span class="token parameter attr-name">--save</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>打开根目录下的<code>_config.yml</code>，翻到最下面，将<code>deploy</code>这一项改为以下内容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/&lt;你的 GitHub 用户名<span class="token punctuation">></span>/&lt;你的 GitHub 用户名<span class="token punctuation">></span>.github.io  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main  <span class="token key atrule">token</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment">#这里填写上面创建的token</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><p>定位到部署 Hexo 的根文件夹，运行命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">hexo</span> g</span><span class="token command"><span class="token keyword">hexo</span> d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>随后可能会弹出窗口让你登录 GitHub 账号，按照提示操作即可。另外，每次在运行<code>hexo d</code>之前都需要运行<code>hexo g</code>以生成静态页面，或直接运行<code>hexo g -d</code>。</p><p>若部署出现问题，可以尝试运行<code>hexo c</code>并再次重复以上步骤。</p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>使用浏览器访问 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> ，以检查部署是否成功。</p><h2 id="解析到自定义域名"><a href="#解析到自定义域名" class="headerlink" title="解析到自定义域名"></a>解析到自定义域名</h2><ol><li>在<code>source</code>文件夹中创建<code>CNAME</code>文件，在其中填入你的域名。</li><li>在域名的 DNS 记录中添加类型为 CNAME 的记录并指向你 GitHub Pages 的网址。</li><li>运行<code>hexo g -d</code>以部署。</li><li>访问你的域名，检查是否成功。</li></ol><h1 id="部署到-Vercel"><a href="#部署到-Vercel" class="headerlink" title="部署到 Vercel"></a>部署到 Vercel</h1><p>待填…</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
